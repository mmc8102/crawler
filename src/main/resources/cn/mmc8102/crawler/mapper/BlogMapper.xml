<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.mmc8102.crawler.mapper.BlogMapper" >
  <resultMap id="BaseResultMap" type="cn.mmc8102.crawler.domain.Blog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="pic" property="pic" jdbcType="VARCHAR" />
    <result column="reading" property="reading" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from blog
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="cn.mmc8102.crawler.domain.Blog" useGeneratedKeys="true" keyProperty="id" >
    insert into blog (title, author, url, 
      pic, create_time, update_time, 
      content, reading)
    values (#{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, 
      #{pic,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{content,jdbcType=LONGVARCHAR}, #{reading})
  </insert>

  <update id="updateByPrimaryKey" parameterType="cn.mmc8102.crawler.domain.Blog" >
    update blog
    set title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      pic = #{pic,jdbcType=VARCHAR},
      reading = #{reading},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <sql id="baseColumn">
    id, title, author, url, pic, create_time, update_time, content, reading
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select <include refid="baseColumn"/>
    from blog
    where id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectAll" resultMap="BaseResultMap" >
    select <include refid="baseColumn"/>
    from blog
  </select>

  <select id="queryByUrlAndTime" resultMap="BaseResultMap">
    select <include refid="baseColumn"/>
    from blog
    where url = #{url} and update_time = #{time}
  </select>

  <sql id="where_sql">
    <where>
      <if test="keyWord!=null">
        (username LIKE concat('%',#{keyWord},'%') OR realname LIKE concat('%',#{keyWord},'%') OR tel LIKE concat('%',#{keyWord},'%'))
      </if>
    </where>
  </sql>

  <select id="queryForCount" resultType="long">
    select COUNT(id) FROM blog
    <include refid="where_sql"/>
  </select>
  <select id="queryForList" resultMap="BaseResultMap">
    select id, title, url, create_time, update_time, reading
    from blog
    <include refid="where_sql"/>
    <if test="page!=null">
      limit #{start}, #{rows}
    </if>
  </select>
</mapper>